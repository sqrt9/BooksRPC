"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = exports.runJXACode = void 0;
var execFile = require("child_process").execFile;
var macosVersion = require("macos-version");
function runJXACode(jxaCode) {
    return executeInOsa(jxaCode, []);
}
exports.runJXACode = runJXACode;
function run(jxaCodeFunction) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    var code = "\nObjC.import('stdlib');\nvar args = JSON.parse($.getenv('OSA_ARGS'));\nvar fn   = (".concat(jxaCodeFunction.toString(), ");\nvar out  = fn.apply(null, args);\nJSON.stringify({ result: out });\n");
    return executeInOsa(code, args);
}
exports.run = run;
// Same with execa
// https://github.com/sindresorhus/execa
var DEFAULT_MAX_BUFFER = 1000 * 1000 * 100;
/**
 * execute the `code` in `osascript`
 */
function executeInOsa(code, args) {
    return new Promise(function (resolve, reject) {
        macosVersion.assertGreaterThanOrEqualTo("10.10");
        var child = execFile("/usr/bin/osascript", ["-l", "JavaScript"], {
            env: {
                OSA_ARGS: JSON.stringify(args)
            },
            maxBuffer: DEFAULT_MAX_BUFFER
        }, function (err, stdout, stderr) {
            if (err) {
                return reject(err);
            }
            if (stderr) {
                console.error(stderr);
            }
            if (!stdout) {
                resolve(undefined);
            }
            try {
                var result = JSON.parse(stdout.toString().trim()).result;
                resolve(result);
            }
            catch (errorOutput) {
                resolve(stdout.toString().trim());
            }
        });
        child.stdin.write(code);
        child.stdin.end();
    });
}
//# sourceMappingURL=run.js.map