
export namespace iTunes {
    // Default Application
 export interface Application {}
    // Class
 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * an AirPlay device
  */
 export interface AirPlayDevice {
   /**
    * is the device currently being played to?
    */
   active(): boolean;
   /**
    * is the device currently available?
    */
   available(): boolean;
   /**
    * the kind of the device
    */
   kind(): any;
   /**
    * the network (MAC) address of the device
    */
   networkAddress(): string;
   /**
    * is the device password- or passcode-protected?
    */
   protected(): boolean;
   /**
    * is the device currently selected?
    */
   selected(): boolean;
   /**
    * does the device support audio playback?
    */
   supportsAudio(): boolean;
   /**
    * does the device support video playback?
    */
   supportsVideo(): boolean;
   /**
    * the output volume for the device (0 = minimum, 100 = maximum)
    */
   soundVolume(): number;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * The application program
  */
 export interface Application {
   /**
    * is AirPlay currently enabled?
    */
   airPlayEnabled(): boolean;
   /**
    * is a track currently being converted?
    */
   converting(): boolean;
   /**
    * the currently selected AirPlay device(s)
    */
   currentAirPlayDevices(): any;
   /**
    * the currently selected encoder (MP3, AIFF, WAV, etc.)
    */
   currentEncoder(): any;
   /**
    * the currently selected equalizer preset
    */
   currentEQPreset(): any;
   /**
    * the playlist containing the currently targeted track
    */
   currentPlaylist(): any;
   /**
    * the name of the current song in the playing stream (provided by streaming server)
    */
   currentStreamTitle(): string;
   /**
    * the URL of the playing stream or streaming web site (provided by streaming server)
    */
   currentStreamURL(): string;
   /**
    * the current targeted track
    */
   currentTrack(): any;
   /**
    * the currently selected visual plug-in
    */
   currentVisual(): any;
   /**
    * is the equalizer enabled?
    */
   EQEnabled(): boolean;
   /**
    * true if all AppleScript track indices should be independent of the play order of the owning playlist.
    */
   fixedIndexing(): boolean;
   /**
    * is iTunes the frontmost application?
    */
   frontmost(): boolean;
   /**
    * are visuals displayed using the entire screen?
    */
   fullScreen(): boolean;
   /**
    * the name of the application
    */
   name(): string;
   /**
    * has the sound output been muted?
    */
   mute(): boolean;
   /**
    * the player’s position within the currently playing track in seconds.
    */
   playerPosition(): any;
   /**
    * is iTunes stopped, paused, or playing?
    */
   playerState(): any;
   /**
    * the selection visible to the user
    */
   selection(): any;
   /**
    * are songs played in random order?
    */
   shuffleEnabled(): boolean;
   /**
    * the playback shuffle mode
    */
   shuffleMode(): any;
   /**
    * the playback repeat mode
    */
   songRepeat(): any;
   /**
    * the sound output volume (0 = minimum, 100 = maximum)
    */
   soundVolume(): number;
   /**
    * the version of iTunes
    */
   version(): string;
   /**
    * are visuals currently being displayed?
    */
   visualsEnabled(): boolean;
   /**
    * the size of the displayed visual
    */
   visualSize(): any;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * a piece of art within a track or playlist
  */
 export interface Artwork {
   /**
    * data for this artwork, in the form of a picture
    */
   data(): any;
   /**
    * description of artwork as a string
    */
   description(): string;
   /**
    * was this artwork downloaded by iTunes?
    */
   downloaded(): boolean;
   /**
    * the data format for this piece of artwork
    */
   format(): any;
   /**
    * kind or purpose of this piece of artwork
    */
   kind(): number;
   /**
    * data for this artwork, in original format
    */
   rawData(): any;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * a playlist representing an audio CD
  */
 export interface AudioCDPlaylist {
   /**
    * the artist of the CD
    */
   artist(): string;
   /**
    * is this CD a compilation album?
    */
   compilation(): boolean;
   /**
    * the composer of the CD
    */
   composer(): string;
   /**
    * the total number of discs in this CD’s album
    */
   discCount(): number;
   /**
    * the index of this CD disc in the source album
    */
   discNumber(): number;
   /**
    * the genre of the CD
    */
   genre(): string;
   /**
    * the year the album was recorded/released
    */
   year(): number;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * a track on an audio CD
  */
 export interface AudioCDTrack {
   /**
    * the location of the file represented by this track
    */
   location(): any;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * the main iTunes window
  */
 export interface BrowserWindow {
   /**
    * the selected songs
    */
   selection(): any;
   /**
    * the playlist currently displayed in the window
    */
   view(): any;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * converts a track to a specific file format
  */
 export interface Encoder {
   /**
    * the data format created by the encoder
    */
   format(): string;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * equalizer preset configuration
  */
 export interface EQPreset {
   /**
    * the equalizer 32 Hz band level (-12.0 dB to +12.0 dB)
    */
   band1(): any;
   /**
    * the equalizer 64 Hz band level (-12.0 dB to +12.0 dB)
    */
   band2(): any;
   /**
    * the equalizer 125 Hz band level (-12.0 dB to +12.0 dB)
    */
   band3(): any;
   /**
    * the equalizer 250 Hz band level (-12.0 dB to +12.0 dB)
    */
   band4(): any;
   /**
    * the equalizer 500 Hz band level (-12.0 dB to +12.0 dB)
    */
   band5(): any;
   /**
    * the equalizer 1 kHz band level (-12.0 dB to +12.0 dB)
    */
   band6(): any;
   /**
    * the equalizer 2 kHz band level (-12.0 dB to +12.0 dB)
    */
   band7(): any;
   /**
    * the equalizer 4 kHz band level (-12.0 dB to +12.0 dB)
    */
   band8(): any;
   /**
    * the equalizer 8 kHz band level (-12.0 dB to +12.0 dB)
    */
   band9(): any;
   /**
    * the equalizer 16 kHz band level (-12.0 dB to +12.0 dB)
    */
   band10(): any;
   /**
    * can this preset be modified?
    */
   modifiable(): boolean;
   /**
    * the equalizer preamp level (-12.0 dB to +12.0 dB)
    */
   preamp(): any;
   /**
    * should tracks which refer to this preset be updated when the preset is renamed or deleted?
    */
   updateTracks(): boolean;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * the iTunes equalizer window
  */
 export interface EQWindow {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * a track representing an audio file (MP3, AIFF, etc.)
  */
 export interface FileTrack {
   /**
    * the location of the file represented by this track
    */
   location(): any;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * a folder that contains other playlists
  */
 export interface FolderPlaylist {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * an item
  */
 export interface Item {
   /**
    * the class of the item
    */
   class(): any;
   /**
    * the container of the item
    */
   container(): any;
   /**
    * the id of the item
    */
   id(): number;
   /**
    * The index of the item in internal application order.
    */
   index(): number;
   /**
    * the name of the item
    */
   name(): string;
   /**
    * the id of the item as a hexadecimal string. This id does not change over time.
    */
   persistentID(): string;
   /**
    * every property of the item
    */
   properties(): any;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * the master music library playlist
  */
 export interface LibraryPlaylist {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * the miniplayer window
  */
 export interface MiniplayerWindow {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * a list of songs/streams
  */
 export interface Playlist {
   /**
    * the description of the playlist
    */
   description(): string;
   /**
    * is this playlist disliked?
    */
   disliked(): boolean;
   /**
    * the total length of all songs (in seconds)
    */
   duration(): number;
   /**
    * the name of the playlist
    */
   name(): string;
   /**
    * is this playlist loved?
    */
   loved(): boolean;
   /**
    * folder which contains this playlist (if any)
    */
   parent(): any;
   /**
    * play the songs in this playlist in random order? (obsolete; always false)
    */
   shuffle(): boolean;
   /**
    * the total size of all songs (in bytes)
    */
   size(): number;
   /**
    * playback repeat mode (obsolete; always off)
    */
   songRepeat(): any;
   /**
    * special playlist kind
    */
   specialKind(): any;
   /**
    * the length of all songs in MM:SS format
    */
   time(): string;
   /**
    * is this playlist visible in the Source list?
    */
   visible(): boolean;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * a sub-window showing a single playlist
  */
 export interface PlaylistWindow {
   /**
    * the selected songs
    */
   selection(): any;
   /**
    * the playlist displayed in the window
    */
   view(): any;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * the radio tuner playlist
  */
 export interface RadioTunerPlaylist {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * a track residing in a shared library
  */
 export interface SharedTrack {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * a music source (music library, CD, device, etc.)
  */
 export interface Source {
   /**
    * the total size of the source if it has a fixed size
    */
   capacity(): any;
   /**
    * the free space on the source if it has a fixed size
    */
   freeSpace(): any;
   kind(): any;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * a subscription playlist from Apple Music
  */
 export interface SubscriptionPlaylist {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * playable audio source
  */
 export interface Track {
   /**
    * the album name of the track
    */
   album(): string;
   /**
    * the album artist of the track
    */
   albumArtist(): string;
   /**
    * is the album for this track disliked?
    */
   albumDisliked(): boolean;
   /**
    * is the album for this track loved?
    */
   albumLoved(): boolean;
   /**
    * the rating of the album for this track (0 to 100)
    */
   albumRating(): number;
   /**
    * the rating kind of the album rating for this track
    */
   albumRatingKind(): any;
   /**
    * the artist/source of the track
    */
   artist(): string;
   /**
    * the bit rate of the track (in kbps)
    */
   bitRate(): number;
   /**
    * the bookmark time of the track in seconds
    */
   bookmark(): any;
   /**
    * is the playback position for this track remembered?
    */
   bookmarkable(): boolean;
   /**
    * the tempo of this track in beats per minute
    */
   bpm(): number;
   /**
    * the category of the track
    */
   category(): string;
   /**
    * the iCloud status of the track
    */
   cloudStatus(): any;
   /**
    * freeform notes about the track
    */
   comment(): string;
   /**
    * is this track from a compilation album?
    */
   compilation(): boolean;
   /**
    * the composer of the track
    */
   composer(): string;
   /**
    * the common, unique ID for this track. If two tracks in different playlists have the same database ID, they are sharing the same data.
    */
   databaseID(): number;
   /**
    * the date the track was added to the playlist
    */
   dateAdded(): any;
   /**
    * the description of the track
    */
   description(): string;
   /**
    * the total number of discs in the source album
    */
   discCount(): number;
   /**
    * the index of the disc containing this track on the source album
    */
   discNumber(): number;
   /**
    * is this track disliked?
    */
   disliked(): boolean;
   /**
    * the Apple ID of the person who downloaded this track
    */
   downloaderAppleID(): string;
   /**
    * the name of the person who downloaded this track
    */
   downloaderName(): string;
   /**
    * the length of the track in seconds
    */
   duration(): any;
   /**
    * is this track checked for playback?
    */
   enabled(): boolean;
   /**
    * the episode ID of the track
    */
   episodeID(): string;
   /**
    * the episode number of the track
    */
   episodeNumber(): number;
   /**
    * the name of the EQ preset of the track
    */
   EQ(): string;
   /**
    * the stop time of the track in seconds
    */
   finish(): any;
   /**
    * is this track from a gapless album?
    */
   gapless(): boolean;
   /**
    * the music/audio genre (category) of the track
    */
   genre(): string;
   /**
    * the grouping (piece) of the track. Generally used to denote movements within a classical work.
    */
   grouping(): string;
   /**
    * a text description of the track
    */
   kind(): string;
   longDescription(): string;
   /**
    * is this track loved?
    */
   loved(): boolean;
   /**
    * the lyrics of the track
    */
   lyrics(): string;
   /**
    * the media kind of the track
    */
   mediaKind(): any;
   /**
    * the modification date of the content of this track
    */
   modificationDate(): any;
   /**
    * the movement name of the track
    */
   movement(): string;
   /**
    * the total number of movements in the work
    */
   movementCount(): number;
   /**
    * the index of the movement in the work
    */
   movementNumber(): number;
   /**
    * number of times this track has been played
    */
   playedCount(): number;
   /**
    * the date and time this track was last played
    */
   playedDate(): any;
   /**
    * the Apple ID of the person who purchased this track
    */
   purchaserAppleID(): string;
   /**
    * the name of the person who purchased this track
    */
   purchaserName(): string;
   /**
    * the rating of this track (0 to 100)
    */
   rating(): number;
   /**
    * the rating kind of this track
    */
   ratingKind(): any;
   /**
    * the release date of this track
    */
   releaseDate(): any;
   /**
    * the sample rate of the track (in Hz)
    */
   sampleRate(): number;
   /**
    * the season number of the track
    */
   seasonNumber(): number;
   /**
    * is this track included when shuffling?
    */
   shufflable(): boolean;
   /**
    * number of times this track has been skipped
    */
   skippedCount(): number;
   /**
    * the date and time this track was last skipped
    */
   skippedDate(): any;
   /**
    * the show name of the track
    */
   show(): string;
   /**
    * override string to use for the track when sorting by album
    */
   sortAlbum(): string;
   /**
    * override string to use for the track when sorting by artist
    */
   sortArtist(): string;
   /**
    * override string to use for the track when sorting by album artist
    */
   sortAlbumArtist(): string;
   /**
    * override string to use for the track when sorting by name
    */
   sortName(): string;
   /**
    * override string to use for the track when sorting by composer
    */
   sortComposer(): string;
   /**
    * override string to use for the track when sorting by show name
    */
   sortShow(): string;
   /**
    * the size of the track (in bytes)
    */
   size(): any;
   /**
    * the start time of the track in seconds
    */
   start(): any;
   /**
    * the length of the track in MM:SS format
    */
   time(): string;
   /**
    * the total number of tracks on the source album
    */
   trackCount(): number;
   /**
    * the index of the track on the source album
    */
   trackNumber(): number;
   /**
    * is this track unplayed?
    */
   unplayed(): boolean;
   /**
    * kind of video track
    */
   videoKind(): any;
   /**
    * relative volume adjustment of the track (-100% to 100%)
    */
   volumeAdjustment(): number;
   /**
    * the work name of the track
    */
   work(): string;
   /**
    * the year the track was recorded/released
    */
   year(): number;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * a track representing a network stream
  */
 export interface URLTrack {
   /**
    * the URL for this track
    */
   address(): string;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * custom playlists created by the user
  */
 export interface UserPlaylist {
   /**
    * is this playlist shared?
    */
   shared(): boolean;
   /**
    * is this a Smart Playlist?
    */
   smart(): boolean;
   /**
    * is this a Genius Playlist?
    */
   genius(): boolean;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * the video window
  */
 export interface VideoWindow {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * a visual plug-in
  */
 export interface Visual {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * any window
  */
 export interface Window {
   /**
    * the boundary rectangle for the window
    */
   bounds(): any;
   /**
    * does the window have a close button?
    */
   closeable(): boolean;
   /**
    * does the window have a collapse button?
    */
   collapseable(): boolean;
   /**
    * is the window collapsed?
    */
   collapsed(): boolean;
   /**
    * is the window full screen?
    */
   fullScreen(): boolean;
   /**
    * the upper left position of the window
    */
   position(): any;
   /**
    * is the window resizable?
    */
   resizable(): boolean;
   /**
    * is the window visible?
    */
   visible(): boolean;
   /**
    * is the window zoomable?
    */
   zoomable(): boolean;
   /**
    * is the window zoomed?
    */
   zoomed(): boolean;
 }
    
    // CLass Extension
    
    // Records
 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 export interface PrintSettings {
   /**
    * the number of copies of a document to be printed
    */
   copies(): number;
   /**
    * Should printed copies be collated?
    */
   collating(): boolean;
   /**
    * the first page of the document to be printed
    */
   startingPage(): number;
   /**
    * the last page of the document to be printed
    */
   endingPage(): number;
   /**
    * number of logical pages laid across a physical page
    */
   pagesAcross(): number;
   /**
    * number of logical pages laid out down a physical page
    */
   pagesDown(): number;
   /**
    * how errors are handled
    */
   errorHandling(): any;
   /**
    * the time at which the desktop printer should print the document
    */
   requestedPrintTime(): any;
   /**
    * printer specific options
    */
   printerFeatures(): any;
   /**
    * for fax number
    */
   faxNumber(): string;
   /**
    * for target printer
    */
   targetPrinter(): string;
 }

    // Function options
    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface PrintOptionalParameter {
      /**
       * Should the application show the print dialog
       */
      printDialog?: boolean;
      /**
       * the print settings
       */
      withProperties?: any;
      /**
       * the kind of printout desired
       */
      kind?: any;
      /**
       * name of theme to use for formatting the printout
       */
      theme?: string;
    }


    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface CountOptionalParameter {
      /**
       * the class of the elements to be counted. Keyword 'each' is optional in AppleScript
       */
      each: any;
    }


    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface DuplicateOptionalParameter {
      /**
       * the new location for the object(s)
       */
      to?: any;
    }


    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface MakeOptionalParameter {
      /**
       * the class of the new element. Keyword 'new' is optional in AppleScript
       */
      new: any;
      /**
       * the location at which to insert the element
       */
      at?: any;
      /**
       * the initial values for the properties of the element
       */
      withProperties?: any;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface MoveOptionalParameter {
      /**
       * the new location for the playlist(s)
       */
      to: any;
    }





    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface AddOptionalParameter {
      /**
       * the location of the added file(s)
       */
      to?: any;
    }








    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface PlayOptionalParameter {
      /**
       * If true, play this track once and then stop.
       */
      once?: boolean;
    }







    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface SearchOptionalParameter {
      /**
       * the search text
       */
      for: string;
      /**
       * area to search (default is all)
       */
      only?: any;
    }








}
export interface iTunes extends iTunes.Application {
    // Functions

     /**
      * Print the specified object(s)
      * @param directParameter list of objects to print
      * @param option
      * 
      */
     print(directParameter?: any, option?: iTunes.PrintOptionalParameter): void;

     /**
      * Close an object
      * @param directParameter the object to close
      * 
      */
     close(directParameter: any, ): void;

     /**
      * Return the number of elements of a particular class within an object
      * @param directParameter the object whose elements are to be counted
      * @param option
      * @return the number of elements
      */
     count(directParameter: any, option?: iTunes.CountOptionalParameter): number;

     /**
      * Delete an element from an object
      * @param directParameter the element to delete
      * 
      */
     delete(directParameter: any, ): void;

     /**
      * Duplicate one or more object(s)
      * @param directParameter the object(s) to duplicate
      * @param option
      * @return to the duplicated object(s)
      */
     duplicate(directParameter: any, option?: iTunes.DuplicateOptionalParameter): any;

     /**
      * Verify if an object exists
      * @param directParameter the object in question
      * @return true if it exists, false if not
      */
     exists(directParameter: any, ): boolean;

     /**
      * Make a new element

      * @param option
      * @return to the new object(s)
      */
     make(option?: iTunes.MakeOptionalParameter): any;

     /**
      * Move playlist(s) to a new location
      * @param directParameter the playlist(s) to move
      * @param option
      * 
      */
     move(directParameter: iTunes.Playlist, option?: iTunes.MoveOptionalParameter): void;

     /**
      * Open the specified object(s)
      * @param directParameter list of objects to open
      * 
      */
     open(directParameter: any, ): void;

     /**
      * Run iTunes

      * 
      */
     run(): void;

     /**
      * Quit iTunes

      * 
      */
     quit(): void;

     /**
      * Save the specified object(s)
      * @param directParameter the object(s) to save
      * 
      */
     save(directParameter: any, ): void;

     /**
      * add one or more files to a playlist
      * @param directParameter the file(s) to add
      * @param option
      * @return reference to added track(s)
      */
     add(directParameter: {}, option?: iTunes.AddOptionalParameter): iTunes.Track;

     /**
      * reposition to beginning of current track or go to previous track if already at start of current track

      * 
      */
     backTrack(): void;

     /**
      * convert one or more files or tracks
      * @param directParameter the file(s)/tracks(s) to convert
      * @return reference to converted track(s)
      */
     convert(directParameter: {}, ): iTunes.Track;

     /**
      * download a cloud track or playlist, or a podcast episode
      * @param directParameter the shared track, URL track or playlist to download
      * 
      */
     download(directParameter: iTunes.Item, ): void;

     /**
      * eject the specified iPod
      * @param directParameter the iPod to eject
      * 
      */
     eject(directParameter?: iTunes.Source, ): void;

     /**
      * skip forward in a playing track

      * 
      */
     fastForward(): void;

     /**
      * advance to the next track in the current playlist

      * 
      */
     nextTrack(): void;

     /**
      * pause playback

      * 
      */
     pause(): void;

     /**
      * play the current track or the specified track or file.
      * @param directParameter item to play
      * @param option
      * 
      */
     play(directParameter?: any, option?: iTunes.PlayOptionalParameter): void;

     /**
      * toggle the playing/paused state of the current track

      * 
      */
     playpause(): void;

     /**
      * return to the previous track in the current playlist

      * 
      */
     previousTrack(): void;

     /**
      * update file track information from the current information in the track’s file
      * @param directParameter the file track to update
      * 
      */
     refresh(directParameter: iTunes.FileTrack, ): void;

     /**
      * disable fast forward/rewind and resume playback, if playing.

      * 
      */
     resume(): void;

     /**
      * reveal and select a track or playlist
      * @param directParameter the item to reveal
      * 
      */
     reveal(directParameter: iTunes.Item, ): void;

     /**
      * skip backwards in a playing track

      * 
      */
     rewind(): void;

     /**
      * search a playlist for tracks matching the search string. Identical to entering search text in the Search field in iTunes.
      * @param directParameter the playlist to search
      * @param option
      * @return reference to found track(s)
      */
     search(directParameter: iTunes.Playlist, option?: iTunes.SearchOptionalParameter): iTunes.Track;

     /**
      * select the specified object(s)
      * @param directParameter the object(s) to select
      * 
      */
     select(directParameter: any, ): void;

     /**
      * stop playback

      * 
      */
     stop(): void;

     /**
      * subscribe to a podcast feed
      * @param directParameter the URL of the feed to subscribe to
      * 
      */
     subscribe(directParameter: string, ): void;

     /**
      * update the specified iPod
      * @param directParameter the iPod to update
      * 
      */
     update(directParameter?: iTunes.Source, ): void;

     /**
      * update all subscribed podcast feeds

      * 
      */
     updateAllPodcasts(): void;

     /**
      * update podcast feed

      * 
      */
     updatePodcast(): void;

     /**
      * Opens a Music Store or audio stream URL
      * @param directParameter the URL to open
      * 
      */
     openLocation(directParameter?: string, ): void;
}
