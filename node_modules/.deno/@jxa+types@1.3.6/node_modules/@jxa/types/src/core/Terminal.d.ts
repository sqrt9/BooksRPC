
export namespace Terminal {
    // Default Application
 export interface Application {}
    // Class
 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * The application‘s top-level scripting object.
  */
 export interface Application {
   /**
    * The name of the application.
    */
   name(): string;
   /**
    * Is this the frontmost (active) application?
    */
   frontmost(): boolean;
   /**
    * The version of the application.
    */
   version(): string;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A window.
  */
 export interface Window {
   /**
    * The full title of the window.
    */
   name(): string;
   /**
    * The unique identifier of the window.
    */
   id(): number;
   /**
    * The index of the window, ordered front to back.
    */
   index(): number;
   /**
    * The bounding rectangle of the window.
    */
   bounds(): any;
   /**
    * Whether the window has a close box.
    */
   closeable(): boolean;
   /**
    * Whether the window can be minimized.
    */
   miniaturizable(): boolean;
   /**
    * Whether the window is currently minimized.
    */
   miniaturized(): boolean;
   /**
    * Whether the window can be resized.
    */
   resizable(): boolean;
   /**
    * Whether the window is currently visible.
    */
   visible(): boolean;
   /**
    * Whether the window can be zoomed.
    */
   zoomable(): boolean;
   /**
    * Whether the window is currently zoomed.
    */
   zoomed(): boolean;
   /**
    * Whether the window is currently the frontmost Terminal window.
    */
   frontmost(): boolean;
   /**
    * The position of the window, relative to the upper left corner of the screen.
    */
   position(): any;
   /**
    * The position of the window, relative to the lower left corner of the screen.
    */
   origin(): any;
   /**
    * The width and height of the window
    */
   size(): any;
   /**
    * The bounding rectangle, relative to the lower left corner of the screen.
    */
   frame(): any;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A set of settings.
  */
 export interface SettingsSet {
   /**
    * The unique identifier of the settings set.
    */
   id(): number;
   /**
    * The name of the settings set.
    */
   name(): string;
   /**
    * The number of rows displayed in the tab.
    */
   numberOfRows(): number;
   /**
    * The number of columns displayed in the tab.
    */
   numberOfColumns(): number;
   /**
    * The cursor color for the tab.
    */
   cursorColor(): any;
   /**
    * The background color for the tab.
    */
   backgroundColor(): any;
   /**
    * The normal text color for the tab.
    */
   normalTextColor(): any;
   /**
    * The bold text color for the tab.
    */
   boldTextColor(): any;
   /**
    * The name of the font used to display the tab’s contents.
    */
   fontName(): string;
   /**
    * The size of the font used to display the tab’s contents.
    */
   fontSize(): number;
   /**
    * Whether the font used to display the tab’s contents is antialiased.
    */
   fontAntialiasing(): boolean;
   /**
    * The processes which will be ignored when checking whether a tab can be closed without showing a prompt.
    */
   cleanCommands(): any;
   /**
    * Whether the title contains the device name.
    */
   titleDisplaysDeviceName(): boolean;
   /**
    * Whether the title contains the shell path.
    */
   titleDisplaysShellPath(): boolean;
   /**
    * Whether the title contains the tab’s size, in rows and columns.
    */
   titleDisplaysWindowSize(): boolean;
   /**
    * Whether the title contains the settings name.
    */
   titleDisplaysSettingsName(): boolean;
   /**
    * Whether the title contains a custom title.
    */
   titleDisplaysCustomTitle(): boolean;
   /**
    * The tab’s custom title.
    */
   customTitle(): string;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A tab.
  */
 export interface Tab {
   /**
    * The number of rows displayed in the tab.
    */
   numberOfRows(): number;
   /**
    * The number of columns displayed in the tab.
    */
   numberOfColumns(): number;
   /**
    * The currently visible contents of the tab.
    */
   contents(): string;
   /**
    * The contents of the entire scrolling buffer of the tab.
    */
   history(): string;
   /**
    * Whether the tab is busy running a process.
    */
   busy(): boolean;
   /**
    * The processes currently running in the tab.
    */
   processes(): any;
   /**
    * Whether the tab is selected.
    */
   selected(): boolean;
   /**
    * Whether the title contains a custom title.
    */
   titleDisplaysCustomTitle(): boolean;
   /**
    * The tab’s custom title.
    */
   customTitle(): string;
   /**
    * The tab’s TTY device.
    */
   tty(): string;
   /**
    * The set of settings which control the tab’s behavior and appearance.
    */
   currentSettings(): any;
   /**
    * The cursor color for the tab.
    */
   cursorColor(): any;
   /**
    * The background color for the tab.
    */
   backgroundColor(): any;
   /**
    * The normal text color for the tab.
    */
   normalTextColor(): any;
   /**
    * The bold text color for the tab.
    */
   boldTextColor(): any;
   /**
    * The processes which will be ignored when checking whether a tab can be closed without showing a prompt.
    */
   cleanCommands(): any;
   /**
    * Whether the title contains the device name.
    */
   titleDisplaysDeviceName(): boolean;
   /**
    * Whether the title contains the shell path.
    */
   titleDisplaysShellPath(): boolean;
   /**
    * Whether the title contains the tab’s size, in rows and columns.
    */
   titleDisplaysWindowSize(): boolean;
   /**
    * Whether the title contains the file name.
    */
   titleDisplaysFileName(): boolean;
   /**
    * The name of the font used to display the tab’s contents.
    */
   fontName(): string;
   /**
    * The size of the font used to display the tab’s contents.
    */
   fontSize(): number;
   /**
    * Whether the font used to display the tab’s contents is antialiased.
    */
   fontAntialiasing(): boolean;
 }
    
    // CLass Extension
 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 export interface Application {
   /**
    * The settings set used for new windows.
    */
   defaultSettings(): any;
   /**
    * The settings set used for the window created on application startup.
    */
   startupSettings(): any;
 }
    
    // Records
 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 export interface PrintSettings {
   /**
    * the number of copies of a document to be printed
    */
   copies(): number;
   /**
    * Should printed copies be collated?
    */
   collating(): boolean;
   /**
    * the first page of the document to be printed
    */
   startingPage(): number;
   /**
    * the last page of the document to be printed
    */
   endingPage(): number;
   /**
    * number of logical pages laid across a physical page
    */
   pagesAcross(): number;
   /**
    * number of logical pages laid out down a physical page
    */
   pagesDown(): number;
   /**
    * how errors are handled
    */
   errorHandling(): any;
   /**
    * for fax number
    */
   faxNumber(): string;
   /**
    * for target printer
    */
   targetPrinter(): string;
 }

    // Function options

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface CloseOptionalParameter {
      /**
       * Whether or not changes should be saved before closing.
       */
      saving?: any;
      /**
       * The file in which to save the document.
       */
      savingIn?: any;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface SaveOptionalParameter {
      /**
       * The file in which to save the document.
       */
      in?: any;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface PrintOptionalParameter {
      /**
       * The print settings to use.
       */
      withProperties?: any;
      /**
       * Should the application show the print dialog?
       */
      printDialog?: boolean;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface QuitOptionalParameter {
      /**
       * Whether or not changed documents should be saved before closing.
       */
      saving?: any;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface CountOptionalParameter {
      /**
       * The class of objects to be counted.
       */
      each?: any;
    }


    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface DuplicateOptionalParameter {
      /**
       * The location for the new object(s).
       */
      to: any;
      /**
       * Properties to be set in the new duplicated object(s).
       */
      withProperties?: any;
    }


    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface MakeOptionalParameter {
      /**
       * The class of the new object.
       */
      new: any;
      /**
       * The location at which to insert the object.
       */
      at?: any;
      /**
       * The initial contents of the object.
       */
      withData?: any;
      /**
       * The initial values for properties of the object.
       */
      withProperties?: any;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface MoveOptionalParameter {
      /**
       * The new location for the object(s).
       */
      to: any;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface DoScriptOptionalParameter {
      /**
       * Data to be passed to the Terminal application as the command line. Deprecated; use direct parameter instead.
       */
      withCommand?: any;
      /**
       * The tab in which to execute the command
       */
      in?: any;
    }


}
export interface Terminal extends Terminal.Application {
    // Functions

     /**
      * Open a document.
      * @param directParameter The file(s) to be opened.
      * 
      */
     open(directParameter: {}, ): void;

     /**
      * Close a document.
      * @param directParameter the document(s) or window(s) to close.
      * @param option
      * 
      */
     close(directParameter: any, option?: Terminal.CloseOptionalParameter): void;

     /**
      * Save a document.
      * @param directParameter The document(s) or window(s) to save.
      * @param option
      * 
      */
     save(directParameter: any, option?: Terminal.SaveOptionalParameter): void;

     /**
      * Print a document.
      * @param directParameter The file(s), document(s), or window(s) to be printed.
      * @param option
      * 
      */
     print(directParameter: {}, option?: Terminal.PrintOptionalParameter): void;

     /**
      * Quit the application.

      * @param option
      * 
      */
     quit(option?: Terminal.QuitOptionalParameter): void;

     /**
      * Return the number of elements of a particular class within an object.
      * @param directParameter the object whose elements are to be counted
      * @param option
      * @return the number of elements
      */
     count(directParameter: any, option?: Terminal.CountOptionalParameter): number;

     /**
      * Delete an object.
      * @param directParameter the object to delete
      * 
      */
     delete(directParameter: any, ): void;

     /**
      * Copy object(s) and put the copies at a new location.
      * @param directParameter the object(s) to duplicate
      * @param option
      * 
      */
     duplicate(directParameter: any, option?: Terminal.DuplicateOptionalParameter): void;

     /**
      * Verify if an object exists.
      * @param directParameter the object in question
      * @return true if it exists, false if not
      */
     exists(directParameter: any, ): boolean;

     /**
      * Make a new object.

      * @param option
      * @return to the new object
      */
     make(option?: Terminal.MakeOptionalParameter): any;

     /**
      * Move object(s) to a new location.
      * @param directParameter the object(s) to move
      * @param option
      * 
      */
     move(directParameter: any, option?: Terminal.MoveOptionalParameter): void;

     /**
      * Runs a UNIX shell script or command.
      * @param directParameter The command to execute.
      * @param option
      * @return The tab the command was executed in.
      */
     doScript(directParameter?: string, option?: Terminal.DoScriptOptionalParameter): Terminal.Tab;

     /**
      * Open a command an ssh, telnet, or x-man-page URL.
      * @param directParameter The URL to open.
      * 
      */
     getURL(directParameter: string, ): void;
}
