
export namespace ImageEvents {
    // Default Application
 export interface Application {}
    // Class
 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * An alias in the file system
  */
 export interface Alias {
   /**
    * the OSType identifying the application that created the alias
    */
   creatorType(): any;
   /**
    * the application that will launch if the alias is opened
    */
   defaultApplication(): any;
   /**
    * the OSType identifying the type of data contained in the alias
    */
   fileType(): any;
   /**
    * The kind of alias, as shown in Finder
    */
   kind(): string;
   /**
    * the version of the product (visible at the top of the "Get Info" window)
    */
   productVersion(): string;
   /**
    * the short version of the application bundle referenced by the alias
    */
   shortVersion(): string;
   /**
    * Is the alias a stationery pad?
    */
   stationery(): boolean;
   /**
    * The type identifier of the alias
    */
   typeIdentifier(): string;
   /**
    * the version of the application bundle referenced by the alias (visible at the bottom of the "Get Info" window)
    */
   version(): string;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * The Classic domain in the file system
  */
 export interface ClassicDomainObject {
   /**
    * The Apple Menu Items folder
    */
   appleMenuFolder(): any;
   /**
    * The Control Panels folder
    */
   controlPanelsFolder(): any;
   /**
    * The Control Strip Modules folder
    */
   controlStripModulesFolder(): any;
   /**
    * The Classic Desktop folder
    */
   desktopFolder(): any;
   /**
    * The Extensions folder
    */
   extensionsFolder(): any;
   /**
    * The Fonts folder
    */
   fontsFolder(): any;
   /**
    * The Launcher Items folder
    */
   launcherItemsFolder(): any;
   /**
    * The Classic Preferences folder
    */
   preferencesFolder(): any;
   /**
    * The Shutdown Items folder
    */
   shutdownFolder(): any;
   /**
    * The StartupItems folder
    */
   startupItemsFolder(): any;
   /**
    * The System folder
    */
   systemFolder(): any;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A disk in the file system
  */
 export interface Disk {
   /**
    * the total number of bytes (free or used) on the disk
    */
   capacity(): number;
   /**
    * Can the media be ejected (floppies, CD's, and so on)?
    */
   ejectable(): boolean;
   /**
    * the file system format of this disk
    */
   format(): any;
   /**
    * the number of free bytes left on the disk
    */
   freeSpace(): number;
   /**
    * Ignore permissions on this disk?
    */
   ignorePrivileges(): boolean;
   /**
    * Is the media a local volume (as opposed to a file server)?
    */
   localVolume(): boolean;
   /**
    * the server on which the disk resides, AFP volumes only
    */
   server(): any;
   /**
    * Is this disk the boot disk?
    */
   startup(): boolean;
   /**
    * the zone in which the disk's server resides, AFP volumes only
    */
   zone(): any;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * An item stored in the file system
  */
 export interface DiskItem {
   /**
    * Is the disk item busy?
    */
   busyStatus(): boolean;
   /**
    * the folder or disk which has this disk item as an element
    */
   container(): any;
   /**
    * the date on which the disk item was created
    */
   creationDate(): any;
   /**
    * the name of the disk item as displayed in the User Interface
    */
   displayedName(): string;
   /**
    * the unique ID of the disk item
    */
   id(): string;
   /**
    * the date on which the disk item was last modified
    */
   modificationDate(): any;
   /**
    * the name of the disk item
    */
   name(): string;
   /**
    * the extension portion of the name
    */
   nameExtension(): string;
   /**
    * Is the disk item a package?
    */
   packageFolder(): boolean;
   /**
    * the file system path of the disk item
    */
   path(): string;
   /**
    * the actual space used by the disk item on disk
    */
   physicalSize(): number;
   /**
    * the POSIX file system path of the disk item
    */
   POSIXPath(): string;
   /**
    * the logical size of the disk item
    */
   size(): number;
   /**
    * the URL of the disk item
    */
   URL(): string;
   /**
    * Is the disk item visible?
    */
   visible(): boolean;
   /**
    * the volume on which the disk item resides
    */
   volume(): string;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A domain in the file system
  */
 export interface Domain {
   /**
    * The Application Support folder
    */
   applicationSupportFolder(): any;
   /**
    * The Applications folder
    */
   applicationsFolder(): any;
   /**
    * The Desktop Pictures folder
    */
   desktopPicturesFolder(): any;
   /**
    * The Folder Action Scripts folder
    */
   folderActionScriptsFolder(): any;
   /**
    * The Fonts folder
    */
   fontsFolder(): any;
   /**
    * the unique identifier of the domain
    */
   id(): string;
   /**
    * The Library folder
    */
   libraryFolder(): any;
   /**
    * the name of the domain
    */
   name(): string;
   /**
    * The Preferences folder
    */
   preferencesFolder(): any;
   /**
    * The Scripting Additions folder
    */
   scriptingAdditionsFolder(): any;
   /**
    * The Scripts folder
    */
   scriptsFolder(): any;
   /**
    * The Shared Documents folder
    */
   sharedDocumentsFolder(): any;
   /**
    * The Speakable Items folder
    */
   speakableItemsFolder(): any;
   /**
    * The Utilities folder
    */
   utilitiesFolder(): any;
   /**
    * The Automator Workflows folder
    */
   workflowsFolder(): any;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A file in the file system
  */
 export interface File {
   /**
    * the OSType identifying the application that created the file
    */
   creatorType(): any;
   /**
    * the application that will launch if the file is opened
    */
   defaultApplication(): any;
   /**
    * the OSType identifying the type of data contained in the file
    */
   fileType(): any;
   /**
    * The kind of file, as shown in Finder
    */
   kind(): string;
   /**
    * the version of the product (visible at the top of the "Get Info" window)
    */
   productVersion(): string;
   /**
    * the short version of the file
    */
   shortVersion(): string;
   /**
    * Is the file a stationery pad?
    */
   stationery(): boolean;
   /**
    * The type identifier of the file
    */
   typeIdentifier(): string;
   /**
    * the version of the file (visible at the bottom of the "Get Info" window)
    */
   version(): string;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A file package in the file system
  */
 export interface FilePackage {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A folder in the file system
  */
 export interface Folder {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * The local domain in the file system
  */
 export interface LocalDomainObject {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * The network domain in the file system
  */
 export interface NetworkDomainObject {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * The system domain in the file system
  */
 export interface SystemDomainObject {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * The user domain in the file system
  */
 export interface UserDomainObject {
   /**
    * The user's Desktop folder
    */
   desktopFolder(): any;
   /**
    * The user's Documents folder
    */
   documentsFolder(): any;
   /**
    * The user's Downloads folder
    */
   downloadsFolder(): any;
   /**
    * The user's Favorites folder
    */
   favoritesFolder(): any;
   /**
    * The user's Home folder
    */
   homeFolder(): any;
   /**
    * The user's Movies folder
    */
   moviesFolder(): any;
   /**
    * The user's Music folder
    */
   musicFolder(): any;
   /**
    * The user's Pictures folder
    */
   picturesFolder(): any;
   /**
    * The user's Public folder
    */
   publicFolder(): any;
   /**
    * The user's Sites folder
    */
   sitesFolder(): any;
   /**
    * The Temporary Items folder
    */
   temporaryItemsFolder(): any;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A monitor connected to the computer
  */
 export interface Display {
   /**
    * the number of the display
    */
   displayNumber(): number;
   /**
    * the profile for the display
    */
   displayProfile(): any;
   /**
    * the name of the display
    */
   name(): string;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * An image contained in a file
  */
 export interface Image {
   /**
    * bit depth of the image's color representation
    */
   bitDepth(): any;
   /**
    * color space of the image's color representation
    */
   colorSpace(): any;
   /**
    * the width and height of the image, respectively, in pixels
    */
   dimensions(): any;
   /**
    * the profile, if any, embedded in the image
    */
   embeddedProfile(): any;
   /**
    * file type of the image's file
    */
   fileType(): any;
   /**
    * the file that contains the image
    */
   imageFile(): any;
   /**
    * the folder or disk that encloses the file that contains the image
    */
   location(): any;
   /**
    * the name of the image
    */
   name(): string;
   /**
    * the horizontal and vertical pixel density of the image, respectively, in dots per inch
    */
   resolution(): any;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A metadata tag: EXIF, IPTC, etc.
  */
 export interface MetadataTag {
   /**
    * the description of the tag's function
    */
   description(): string;
   /**
    * the name of the tag
    */
   name(): string;
   /**
    * the current setting of the tag
    */
   value(): any;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A ColorSync ICC profile.
  */
 export interface Profile {
   /**
    * the color space of the profile
    */
   colorSpace(): any;
   /**
    * the connection space of the profile
    */
   connectionSpace(): any;
   /**
    * the creation date of the profile
    */
   creationDate(): any;
   /**
    * the creator type of the profile
    */
   creator(): string;
   /**
    * the device class of the profile
    */
   deviceClass(): any;
   /**
    * the device manufacturer of the profile
    */
   deviceManufacturer(): string;
   /**
    * the device model of the profile
    */
   deviceModel(): number;
   /**
    * the file location of the profile
    */
   location(): any;
   /**
    * the description text of the profile
    */
   name(): string;
   /**
    * the intended platform of the profile
    */
   platform(): string;
   /**
    * the preferred CMM of the profile
    */
   preferredCMM(): string;
   /**
    * the quality of the profile
    */
   quality(): any;
   /**
    * the rendering intent of the profile
    */
   renderingIntent(): any;
   /**
    * the size of the profile in bytes
    */
   size(): number;
   /**
    * the version number of the profile
    */
   version(): string;
 }
    
    // CLass Extension
 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * The Disk-Folder-File specific extensions to the application
  */
 export interface Application {
   /**
    * The Application Support folder
    */
   applicationSupportFolder(): any;
   /**
    * The user's Applications folder
    */
   applicationsFolder(): any;
   /**
    * the collection of folders belonging to the Classic System
    */
   classicDomain(): any;
   /**
    * The user's Desktop folder
    */
   desktopFolder(): any;
   /**
    * The Desktop Pictures folder
    */
   desktopPicturesFolder(): any;
   /**
    * The user's Documents folder
    */
   documentsFolder(): any;
   /**
    * The user's Downloads folder
    */
   downloadsFolder(): any;
   /**
    * The user's Favorites folder
    */
   favoritesFolder(): any;
   /**
    * The user's Folder Action Scripts folder
    */
   folderActionScriptsFolder(): any;
   /**
    * The Fonts folder
    */
   fontsFolder(): any;
   /**
    * The Home folder of the currently logged in user
    */
   homeFolder(): any;
   /**
    * The Library folder
    */
   libraryFolder(): any;
   /**
    * the collection of folders residing on the Local machine
    */
   localDomain(): any;
   /**
    * The user's Movies folder
    */
   moviesFolder(): any;
   /**
    * The user's Music folder
    */
   musicFolder(): any;
   /**
    * the collection of folders residing on the Network
    */
   networkDomain(): any;
   /**
    * The user's Pictures folder
    */
   picturesFolder(): any;
   /**
    * The user's Preferences folder
    */
   preferencesFolder(): any;
   /**
    * The user's Public folder
    */
   publicFolder(): any;
   /**
    * The Scripting Additions folder
    */
   scriptingAdditionsFolder(): any;
   /**
    * The user's Scripts folder
    */
   scriptsFolder(): any;
   /**
    * The Shared Documents folder
    */
   sharedDocumentsFolder(): any;
   /**
    * The user's Sites folder
    */
   sitesFolder(): any;
   /**
    * The Speakable Items folder
    */
   speakableItemsFolder(): any;
   /**
    * the disk from which Mac OS X was loaded
    */
   startupDisk(): any;
   /**
    * the collection of folders belonging to the System
    */
   systemDomain(): any;
   /**
    * The Temporary Items folder
    */
   temporaryItemsFolder(): any;
   /**
    * The user's Trash folder
    */
   trash(): any;
   /**
    * the collection of folders belonging to the User
    */
   userDomain(): any;
   /**
    * The Utilities folder
    */
   utilitiesFolder(): any;
   /**
    * The Automator Workflows folder
    */
   workflowsFolder(): any;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * The Image Events application
  */
 export interface Application {
   /**
    * the default CMYK profile
    */
   defaultCMYKProfile(): any;
   /**
    * the default CMYK profile location
    */
   defaultCMYKProfileLocation(): any;
   /**
    * the default Gray profile
    */
   defaultGrayProfile(): any;
   /**
    * the default Gray profile location
    */
   defaultGrayProfileLocation(): any;
   /**
    * the default Lab profile
    */
   defaultLabProfile(): any;
   /**
    * the default Lab profile location
    */
   defaultLabProfileLocation(): any;
   /**
    * the default RGB profile
    */
   defaultRGBProfile(): any;
   /**
    * the default RGB profile location
    */
   defaultRGBProfileLocation(): any;
   /**
    * the default XYZ profile
    */
   defaultXYZProfile(): any;
   /**
    * the default XYZ profile location
    */
   defaultXYZProfileLocation(): any;
   /**
    * specifies preferred Color Management Module to use, or "automatic"
    */
   preferredCMM(): string;
   /**
    * the ColorSync profile folder
    */
   profileFolder(): any;
   /**
    * the time in seconds the application will idle before quitting; if set to zero, idle time will not cause the application to quit
    */
   quitDelay(): number;
   /**
    * the default system profile
    */
   systemProfile(): any;
   /**
    * the default system profile location
    */
   systemProfileLocation(): any;
 }
    
    // Records

    // Function options

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface MoveOptionalParameter {
      /**
       * The new location for the disk item(s).
       */
      to: any;
    }


    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface CloseOptionalParameter {
      /**
       * Specifies whether changes should be saved before closing.
       */
      saving?: any;
      /**
       * The file in which to save the image.
       */
      savingIn?: string;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface CropOptionalParameter {
      /**
       * the width and height of the new image, respectively, in pixels, as a pair of integers
       */
      toDimensions: any;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface EmbedOptionalParameter {
      /**
       * the profile to embed in the image
       */
      withSource: any;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface FlipOptionalParameter {
      /**
       * flip horizontally
       */
      horizontal?: boolean;
      /**
       * flip vertically
       */
      vertical?: boolean;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface MatchOptionalParameter {
      /**
       * the destination profile for the match
       */
      toDestination: any;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface PadOptionalParameter {
      /**
       * the width and height of the new image, respectively, in pixels, as a pair of integers
       */
      toDimensions: any;
      /**
       * the RGB color values with which to pad the new image, as a list of integers
       */
      withPadColor?: any;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface RotateOptionalParameter {
      /**
       * rotate using an angle
       */
      toAngle: any;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface SaveOptionalParameter {
      /**
       * file type in which to save the image ( default is to make no change )
       */
      as?: any;
      /**
       * Shall an icon be added? ( default is false )
       */
      icon?: boolean;
      /**
       * file path in which to save the image, in HFS or POSIX form
       */
      in?: string;
      /**
       * Are the bytes to be compressed with PackBits? ( default is false, applies only to TIFF )
       */
      packBits?: boolean;
      /**
       * specifies the compression level of the resultant file ( applies only to JPEG )
       */
      withCompressionLevel?: any;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface ScaleOptionalParameter {
      /**
       * scale using a scalefactor
       */
      byFactor?: any;
      /**
       * scale using a max width/length
       */
      toSize?: number;
    }


}
export interface ImageEvents extends ImageEvents.Application {
    // Functions

     /**
      * Delete disk item(s).
      * @param directParameter The disk item(s) to be deleted.
      * 
      */
     delete(directParameter: ImageEvents.DiskItem, ): void;

     /**
      * Move disk item(s) to a new location.
      * @param directParameter The disk item(s) to be moved.
      * @param option
      * @return undefined
      */
     move(directParameter: {}, option?: ImageEvents.MoveOptionalParameter): void;

     /**
      * Open disk item(s) with the appropriate application.
      * @param directParameter The disk item(s) to be opened.
      * @return undefined
      */
     open(directParameter: {}, ): ImageEvents.File;

     /**
      * Close an image
      * @param directParameter the object for the command
      * @param option
      * 
      */
     close(directParameter: any, option?: ImageEvents.CloseOptionalParameter): void;

     /**
      * Crop an image
      * @param directParameter the object for the command
      * @param option
      * 
      */
     crop(directParameter: any, option?: ImageEvents.CropOptionalParameter): void;

     /**
      * Embed an image with an ICC profile
      * @param directParameter the object for the command
      * @param option
      * 
      */
     embed(directParameter: any, option?: ImageEvents.EmbedOptionalParameter): void;

     /**
      * Flip an image
      * @param directParameter the object for the command
      * @param option
      * 
      */
     flip(directParameter: any, option?: ImageEvents.FlipOptionalParameter): void;

     /**
      * Match an image
      * @param directParameter the object for the command
      * @param option
      * 
      */
     match(directParameter: any, option?: ImageEvents.MatchOptionalParameter): void;

     /**
      * Pad an image
      * @param directParameter the object for the command
      * @param option
      * 
      */
     pad(directParameter: any, option?: ImageEvents.PadOptionalParameter): void;

     /**
      * Rotate an image
      * @param directParameter the object for the command
      * @param option
      * 
      */
     rotate(directParameter: any, option?: ImageEvents.RotateOptionalParameter): void;

     /**
      * Save an image to a file in one of various formats
      * @param directParameter the object for the command
      * @param option
      * @return undefined
      */
     save(directParameter: any, option?: ImageEvents.SaveOptionalParameter): ImageEvents.Alias;

     /**
      * Scale an image
      * @param directParameter the object for the command
      * @param option
      * 
      */
     scale(directParameter: any, option?: ImageEvents.ScaleOptionalParameter): void;

     /**
      * Remove any embedded ICC profiles from an image
      * @param directParameter the object for the command
      * 
      */
     unembed(directParameter: any, ): void;
}
