
export namespace ScriptEditor {
    // Default Application
 export interface Application {}
    // Class
 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * An application's top level scripting object.
  */
 export interface Application {
   /**
    * Is this the frontmost (active) application?
    */
   frontmost(): boolean;
   /**
    * The name of the application.
    */
   name(): string;
   /**
    * The version of the application.
    */
   version(): string;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A color.
  */
 export interface Color {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A document.
  */
 export interface Document {
   /**
    * Has the document been modified since the last save?
    */
   modified(): boolean;
   /**
    * The document's name.
    */
   name(): string;
   /**
    * The document's path.
    */
   path(): string;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A scriptable object.
  */
 export interface Item {
   /**
    * The class of the object.
    */
   class(): any;
   /**
    * All of the object's properties.
    */
   properties(): any;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A window.
  */
 export interface Window {
   /**
    * The bounding rectangle of the window.
    */
   bounds(): any;
   /**
    * Whether the window has a close box.
    */
   closeable(): boolean;
   /**
    * The document whose contents are being displayed in the window.
    */
   document(): any;
   /**
    * Whether the window floats.
    */
   floating(): boolean;
   /**
    * The unique identifier of the window.
    */
   id(): number;
   /**
    * The index of the window, ordered front to back.
    */
   index(): number;
   /**
    * Whether the window can be miniaturized.
    */
   miniaturizable(): boolean;
   /**
    * Whether the window is currently miniaturized.
    */
   miniaturized(): boolean;
   /**
    * Whether the window is the application's current modal window.
    */
   modal(): boolean;
   /**
    * The full title of the window.
    */
   name(): string;
   /**
    * Whether the window can be resized.
    */
   resizable(): boolean;
   /**
    * Whether the window has a title bar.
    */
   titled(): boolean;
   /**
    * Whether the window is currently visible.
    */
   visible(): boolean;
   /**
    * Whether the window can be zoomed.
    */
   zoomable(): boolean;
   /**
    * Whether the window is currently zoomed.
    */
   zoomed(): boolean;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * Represents an inline text attachment. This class is used mainly for make commands.
  */
 export interface Attachment {
   /**
    * The path to the file for the attachment
    */
   fileName(): string;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * This subdivides the text into chunks that all have the same attributes.
  */
 export interface AttributeRun {
   /**
    * The color of the first character.
    */
   color(): any;
   /**
    * The name of the font of the first character.
    */
   font(): string;
   /**
    * The size in points of the first character.
    */
   size(): number;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * This subdivides the text into characters.
  */
 export interface Character {
   /**
    * The color of the first character.
    */
   color(): any;
   /**
    * The name of the font of the first character.
    */
   font(): string;
   /**
    * The size in points of the first character.
    */
   size(): number;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * This subdivides the text into paragraphs.
  */
 export interface Paragraph {
   /**
    * The color of the first character.
    */
   color(): any;
   /**
    * The name of the font of the first character.
    */
   font(): string;
   /**
    * The size in points of the first character.
    */
   size(): number;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * Rich (styled) text
  */
 export interface Text {
   /**
    * The color of the first character.
    */
   color(): any;
   /**
    * The name of the font of the first character.
    */
   font(): string;
   /**
    * The size in points of the first character.
    */
   size(): number;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * This subdivides the text into words.
  */
 export interface Word {
   /**
    * The color of the first character.
    */
   color(): any;
   /**
    * The name of the font of the first character.
    */
   font(): string;
   /**
    * The size in points of the first character.
    */
   size(): number;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A class
  */
 export interface Class {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * An insertion point between two objects.
  */
 export interface InsertionPoint {
   /**
    * The contents of the insertion point.
    */
   contents(): any;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A scripting language.
  */
 export interface Language {
   /**
    * The description
    */
   description(): string;
   /**
    * The unique id of the language.
    */
   id(): string;
   /**
    * The name of the language.
    */
   name(): string;
   /**
    * Is the language compilable?
    */
   supportsCompiling(): boolean;
   /**
    * Is the language recordable?
    */
   supportsRecording(): boolean;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A way to refer to the state of the current selection.
  */
 export interface SelectionObject {
   /**
    * The range of characters in the selection.
    */
   characterRange(): any;
   /**
    * The contents of the selection.
    */
   contents(): any;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 export interface PrintSettings {
   /**
    * the number of copies of a document to be printed
    */
   copies(): number;
   /**
    * Should printed copies be collated?
    */
   collating(): boolean;
   /**
    * the first page of the document to be printed
    */
   startingPage(): number;
   /**
    * the last page of the document to be printed
    */
   endingPage(): number;
   /**
    * number of logical pages laid across a physical page
    */
   pagesAcross(): number;
   /**
    * number of logical pages laid out down a physical page
    */
   pagesDown(): number;
   /**
    * the time at which the desktop printer should print the document
    */
   requestedPrintTime(): any;
   /**
    * how errors are handled
    */
   errorHandling(): any;
   /**
    * for fax number
    */
   faxNumber(): string;
   /**
    * for target printer
    */
   targetPrinter(): string;
 }
    
    // CLass Extension
 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * Script Editor's top level scripting object.
  */
 export interface Application {
   /**
    * The current selection.
    */
   selection(): any;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A script document.
  */
 export interface Document {
   /**
    * The contents of the document.
    */
   contents(): any;
   /**
    * The description of the document.
    */
   description(): any;
   /**
    * The event log of the document.
    */
   eventLog(): any;
   /**
    * The scripting language.
    */
   language(): any;
   /**
    * The current selection.
    */
   selection(): any;
   /**
    * The text of the document.
    */
   text(): any;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * Rich (styled) text
  */
 export interface TextCtxt {
   /**
    * The color of the first character.
    */
   color(): any;
   /**
    * The name of the font of the first character.
    */
   font(): string;
   /**
    * The size in points of the first character.
    */
   size(): number;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A window.
  */
 export interface Window {
   /**
    * The full title of the window.
    */
   name(): string;
 }
    
    // Records

    // Function options
    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface CloseOptionalParameter {
      /**
       * Specifies whether changes should be saved before closing.
       */
      saving?: any;
      /**
       * The file in which to save the object.
       */
      savingIn?: any;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface CountOptionalParameter {
      /**
       * The class of objects to be counted.
       */
      each?: any;
    }


    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface DuplicateOptionalParameter {
      /**
       * The location for the new object(s).
       */
      to?: any;
      /**
       * Properties to be set in the new duplicated object(s).
       */
      withProperties?: any;
    }



    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface MakeOptionalParameter {
      /**
       * The class of the new object.
       */
      new: any;
      /**
       * The location at which to insert the object.
       */
      at?: any;
      /**
       * The initial data for the object.
       */
      withData?: any;
      /**
       * The initial values for properties of the object.
       */
      withProperties?: any;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface MoveOptionalParameter {
      /**
       * The new location for the object(s).
       */
      to: any;
    }


    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface PrintOptionalParameter {
      /**
       * Should the application show the Print dialog?
       */
      printDialog?: boolean;
      /**
       * the print settings
       */
      withProperties?: any;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface QuitOptionalParameter {
      /**
       * Specifies whether changes should be saved before quitting.
       */
      saving?: any;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface SaveOptionalParameter {
      /**
       * The file type in which to save the data.
       */
      as?: string;
      /**
       * The file in which to save the object.
       */
      in?: any;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface SetOptionalParameter {
      /**
       * The new value.
       */
      to: any;
    }




    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface SaveOptionalParameter1 {
      /**
       * The file type in which to save the data. Use one of the following strings: "script", "script bundle", "application", "text".
       */
      as?: string;
      /**
       * The file in which to save the object.
       */
      in?: any;
      /**
       * Should the script be saved as Run-Only? If it is, you will not be able to edit the contents of the script again. The default is not to save as run only. (Applies to all script types except for "text").
       */
      runOnly?: boolean;
      /**
       * Show the startup screen? The default is not to show the startup screen. (Only applies to scripts saved as "application").
       */
      startupScreen?: boolean;
      /**
       * Should the application remain open after it is launched? The default is not to stay open. (Only applies to scripts saved as "application").
       */
      stayOpen?: boolean;
    }

}
export interface ScriptEditor extends ScriptEditor.Application {
    // Functions

     /**
      * Close an object.
      * @param directParameter the object for the command
      * @param option
      * 
      */
     close(directParameter: any, option?: ScriptEditor.CloseOptionalParameter): void;

     /**
      * Return the number of elements of a particular class within an object.
      * @param directParameter the object for the command
      * @param option
      * @return undefined
      */
     count(directParameter: any, option?: ScriptEditor.CountOptionalParameter): number;

     /**
      * Delete an object.
      * @param directParameter the object for the command
      * 
      */
     delete(directParameter: any, ): void;

     /**
      * Copy object(s) and put the copies at a new location.
      * @param directParameter the object for the command
      * @param option
      * 
      */
     duplicate(directParameter: any, option?: ScriptEditor.DuplicateOptionalParameter): void;

     /**
      * Verify if an object exists.
      * @param directParameter the object for the command
      * @return undefined
      */
     exists(directParameter: any, ): boolean;

     /**
      * Get the data for an object.
      * @param directParameter the object for the command
      * @return undefined
      */
     get(directParameter: any, ): any;

     /**
      * Make a new object.

      * @param option
      * @return undefined
      */
     make(option?: ScriptEditor.MakeOptionalParameter): any;

     /**
      * Move object(s) to a new location.
      * @param directParameter the object for the command
      * @param option
      * 
      */
     move(directParameter: any, option?: ScriptEditor.MoveOptionalParameter): void;

     /**
      * Open an object.
      * @param directParameter The file(s) to be opened.
      * @return undefined
      */
     open(directParameter: any, ): ScriptEditor.Document;

     /**
      * Print an object.
      * @param directParameter The file(s) or document(s) to be printed.
      * @param option
      * 
      */
     print(directParameter: any, option?: ScriptEditor.PrintOptionalParameter): void;

     /**
      * Quit an application.

      * @param option
      * 
      */
     quit(option?: ScriptEditor.QuitOptionalParameter): void;

     /**
      * Save an object.
      * @param directParameter the object for the command
      * @param option
      * 
      */
     save(directParameter: any, option?: ScriptEditor.SaveOptionalParameter): void;

     /**
      * Set an object's data.
      * @param directParameter the object for the command
      * @param option
      * 
      */
     set(directParameter: any, option?: ScriptEditor.SetOptionalParameter): void;

     /**
      * Check the syntax of a document.
      * @param directParameter the object for the command
      * 
      */
     checkSyntax(directParameter: any, ): void;

     /**
      * Compile the script of a document.
      * @param directParameter the object for the command
      * @return undefined
      */
     compile(directParameter: any, ): boolean;

     /**
      * Execute the document.
      * @param directParameter the object for the command
      * @return undefined
      */
     execute(directParameter: any, ): any;

     /**
      * Save an object.
      * @param directParameter the object for the command
      * @param option
      * 
      */
     save(directParameter: any, option?: ScriptEditor.SaveOptionalParameter1): void;
}
