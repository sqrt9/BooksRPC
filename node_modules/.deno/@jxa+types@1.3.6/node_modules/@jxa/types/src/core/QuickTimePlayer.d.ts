
export namespace QuickTimePlayer {
    // Default Application
 export interface Application {}
    // Class
 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A video recording device
  */
 export interface VideoRecordingDevice {
   /**
    * The name of the device.
    */
   name(): string;
   /**
    * The unique identifier of the device.
    */
   id(): string;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * An audio recording device
  */
 export interface AudioRecordingDevice {
   /**
    * The name of the device.
    */
   name(): string;
   /**
    * The unique identifier of the device.
    */
   id(): string;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * An audio recording compression preset
  */
 export interface AudioCompressionPreset {
   /**
    * The name of the preset.
    */
   name(): string;
   /**
    * The unique identifier of the preset.
    */
   id(): string;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A movie recording compression preset
  */
 export interface MovieCompressionPreset {
   /**
    * The name of the preset.
    */
   name(): string;
   /**
    * The unique identifier of the preset.
    */
   id(): string;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A screen recording compression preset
  */
 export interface ScreenCompressionPreset {
   /**
    * The name of the preset.
    */
   name(): string;
   /**
    * The unique identifier of the preset.
    */
   id(): string;
 }
    
    // CLass Extension
 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 export interface Application {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 export interface Application {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 export interface Document {
   /**
    * The volume of the movie from 0 to 1, where 1 is 100%.
    */
   audioVolume(): any;
   /**
    * The current time of the movie in seconds.
    */
   currentTime(): any;
   /**
    * The data rate of the movie in bytes per second.
    */
   dataRate(): number;
   /**
    * The data size of the movie in bytes.
    */
   dataSize(): number;
   /**
    * The duration of the movie in seconds.
    */
   duration(): any;
   /**
    * Is the movie playing in a loop?
    */
   looping(): boolean;
   /**
    * Is the movie muted?
    */
   muted(): boolean;
   /**
    * The natural dimensions of the movie.
    */
   naturalDimensions(): any;
   /**
    * Is the movie playing?
    */
   playing(): boolean;
   /**
    * The current rate of the movie.
    */
   rate(): any;
   /**
    * Is the movie presented in full screen?
    */
   presenting(): boolean;
   /**
    * The currently previewing audio device.
    */
   currentMicrophone(): any;
   /**
    * The currently previewing video device.
    */
   currentCamera(): any;
   /**
    * The current audio compression preset.
    */
   currentAudioCompression(): any;
   /**
    * The current movie compression preset.
    */
   currentMovieCompression(): any;
   /**
    * The current screen compression preset.
    */
   currentScreenCompression(): any;
 }
    
    // Records

    // Function options






    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface StepBackwardOptionalParameter {
      /**
       * number of steps
       */
      by?: number;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface StepForwardOptionalParameter {
      /**
       * number of steps
       */
      by?: number;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface TrimOptionalParameter {
      /**
       * start time in seconds
       */
      from: any;
      /**
       * end time in seconds
       */
      to: any;
    }





    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface ExportOptionalParameter {
      /**
       * the destination file
       */
      in: any;
      /**
       * the name of the export settings preset to use
       */
      usingSettingsPreset: string;
    }


}
export interface QuickTimePlayer extends QuickTimePlayer.Application {
    // Functions

     /**
      * Open a URL.
      * @param directParameter the URL
      * 
      */
     openURL(directParameter: string, ): void;

     /**
      * Play the movie.
      * @param directParameter the movie to play
      * 
      */
     play(directParameter: QuickTimePlayer.Document, ): void;

     /**
      * Start the movie recording.
      * @param directParameter the recording to start
      * 
      */
     start(directParameter: QuickTimePlayer.Document, ): void;

     /**
      * Pause the recording.
      * @param directParameter the recording to pause
      * 
      */
     pause(directParameter: QuickTimePlayer.Document, ): void;

     /**
      * Resume the recording.
      * @param directParameter the recording to resume
      * 
      */
     resume(directParameter: QuickTimePlayer.Document, ): void;

     /**
      * Stop the movie or recording.
      * @param directParameter the movie or recording to stop
      * 
      */
     stop(directParameter: QuickTimePlayer.Document, ): void;

     /**
      * Step the movie backward the specified number of steps (default is 1).
      * @param directParameter the movie to step
      * @param option
      * 
      */
     stepBackward(directParameter: QuickTimePlayer.Document, option?: QuickTimePlayer.StepBackwardOptionalParameter): void;

     /**
      * Step the movie forward the specified number of steps (default is 1).
      * @param directParameter the movie to step
      * @param option
      * 
      */
     stepForward(directParameter: QuickTimePlayer.Document, option?: QuickTimePlayer.StepForwardOptionalParameter): void;

     /**
      * Trim the movie.
      * @param directParameter the movie to trim
      * @param option
      * 
      */
     trim(directParameter: QuickTimePlayer.Document, option?: QuickTimePlayer.TrimOptionalParameter): void;

     /**
      * Present the document full screen.
      * @param directParameter the document to present
      * 
      */
     present(directParameter: QuickTimePlayer.Document, ): void;

     /**
      * Create a new movie recording document.

      * @return The new movie recording document.
      */
     newMovieRecording(): void;

     /**
      * Create a new audio recording document.

      * @return The new audio recording document.
      */
     newAudioRecording(): void;

     /**
      * Create a new screen recording document.

      * @return The new screen recording document.
      */
     newScreenRecording(): void;

     /**
      * Export a movie to another file
      * @param directParameter the movie to export
      * @param option
      * 
      */
     export(directParameter: QuickTimePlayer.Document, option?: QuickTimePlayer.ExportOptionalParameter): void;

     /**
      * Show the document's Remote HUD
      * @param directParameter undefined
      * 
      */
     showRemoteHud(directParameter: QuickTimePlayer.Document, ): void;
}
