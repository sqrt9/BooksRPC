
export namespace Photos {
    // Default Application
 export interface Application {}
    // Class
 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * The application's top-level scripting object.
  */
 export interface Application {
   /**
    * The name of the application.
    */
   name(): string;
   /**
    * Is this the active application?
    */
   frontmost(): boolean;
   /**
    * The version number of the application.
    */
   version(): string;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A media item, such as a photo or video.
  */
 export interface MediaItem {
   /**
    * A list of keywords to associate with a media item
    */
   keywords(): any;
   /**
    * The name (title) of the media item.
    */
   name(): string;
   /**
    * A description of the media item.
    */
   description(): string;
   /**
    * Whether the media item has been favorited.
    */
   favorite(): boolean;
   /**
    * The date of the media item
    */
   date(): any;
   /**
    * The unique ID of the media item
    */
   id(): string;
   /**
    * The height of the media item in pixels.
    */
   height(): number;
   /**
    * The width of the media item in pixels.
    */
   width(): number;
   /**
    * The name of the file on disk.
    */
   filename(): string;
   /**
    * The GPS altitude in meters.
    */
   altitude(): any;
   /**
    * The GPS latitude and longitude, in an ordered list of 2 numbers. Latitude in range -90.0 to 90.0, longitude in range -180.0 to 180.0.
    */
   location(): any;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * Base class for collections that contains other items, such as albums and folders
  */
 export interface Container {
   /**
    * The unique ID of this container.
    */
   id(): string;
   /**
    * The name of this container.
    */
   name(): string;
   /**
    * This container's parent folder, if any.
    */
   parent(): any;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * An album. A container that holds media items
  */
 export interface Album {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A folder. A container that holds albums and other folders, but not media items
  */
 export interface Folder {}

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * A set of media items that represents a Moment.
  */
 export interface Moment {
   /**
    * The unique ID of the Moment.
    */
   id(): string;
   /**
    * The name of the Moment.
    */
   name(): string;
 }
    
    // CLass Extension
 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * The top level scripting object for Photos.
  */
 export interface Application {
   /**
    * The currently selected media items in the application
    */
   selection(): any;
   /**
    * Favorited media items album.
    */
   favoritesAlbum(): any;
   /**
    * Last import album.
    */
   lastImportAlbum(): any;
   /**
    * Returns true if a slideshow is currently running.
    */
   slideshowRunning(): boolean;
   /**
    * The set of recently deleted media items
    */
   recentlyDeletedAlbum(): any;
 }
    
    // Records

    // Function options
    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface CountOptionalParameter {
      /**
       * The class of objects to be counted.
       */
      each?: any;
    }




    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface ImportOptionalParameter {
      /**
       * The album to import into.
       */
      into?: any;
      /**
       * Skip duplicate checking and import everything, defaults to false.
       */
      skipCheckDuplicates?: boolean;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface ExportOptionalParameter {
      /**
       * The destination of the export.
       */
      to: any;
      /**
       * Export the original files if true, otherwise export rendered jpgs. defaults to false.
       */
      usingOriginals?: boolean;
    }


    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface MakeOptionalParameter {
      /**
       * The class of the new object, allowed values are album or folder
       */
      new: any;
      /**
       * The name of the new object.
       */
      named?: string;
      /**
       * The parent folder for the new object.
       */
      at?: any;
    }


    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface AddOptionalParameter {
      /**
       * The album to add to.
       */
      to: any;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface StartSlideshowOptionalParameter {
      /**
       * The media items to show.
       */
      using: any;
    }







}
export interface Photos extends Photos.Application {
    // Functions

     /**
      * Return the number of elements of a particular class within an object.
      * @param directParameter The objects to be counted.
      * @param option
      * @return The count.
      */
     count(directParameter: any, option?: Photos.CountOptionalParameter): number;

     /**
      * Verify that an object exists.
      * @param directParameter The object(s) to check.
      * @return Did the object(s) exist?
      */
     exists(directParameter: any, ): boolean;

     /**
      * Open a photo library
      * @param directParameter The photo library to be opened.
      * 
      */
     open(directParameter: {}, ): void;

     /**
      * Quit the application.

      * 
      */
     quit(): void;

     /**
      * Import files into the library
      * @param directParameter The list of files to copy.
      * @param option
      * @return The imported media items in an array
      */
     import(directParameter: {}, option?: Photos.ImportOptionalParameter): void;

     /**
      * Export media items to the specified location as files
      * @param directParameter The list of media items to export.
      * @param option
      * 
      */
     export(directParameter: {}, option?: Photos.ExportOptionalParameter): void;

     /**
      * Duplicate an object. Only media items can be duplicated
      * @param directParameter The media item to duplicate
      * @return The duplicated media item
      */
     duplicate(directParameter: {}, ): Photos.MediaItem;

     /**
      * Create a new object. Only new albums and folders can be created.

      * @param option
      * @return The new object.
      */
     make(option?: Photos.MakeOptionalParameter): void;

     /**
      * Delete an object. Only albums and folders can be deleted.
      * @param directParameter The album or folder to delete.
      * 
      */
     delete(directParameter: {}, ): void;

     /**
      * Add media items to an album.
      * @param directParameter The list of media items to add.
      * @param option
      * 
      */
     add(directParameter: {}, option?: Photos.AddOptionalParameter): void;

     /**
      * Display an ad-hoc slide show from a list of media items, an album, a folder, or a moment

      * @param option
      * 
      */
     startSlideshow(option?: Photos.StartSlideshowOptionalParameter): void;

     /**
      * End the currently-playing slideshow.

      * 
      */
     stopSlideshow(): void;

     /**
      * Skip to next slide in currently-playing slideshow.

      * 
      */
     nextSlide(): void;

     /**
      * Skip to previous slide in currently-playing slideshow.

      * 
      */
     previousSlide(): void;

     /**
      * Pause the currently-playing slideshow.

      * 
      */
     pauseSlideshow(): void;

     /**
      * Resume the currently-playing slideshow.

      * 
      */
     resumeSlideshow(): void;

     /**
      * Show the image at path in the application, used to show spotlight search results
      * @param directParameter The full path to the image
      * 
      */
     spotlight(directParameter: {}, ): void;
}
