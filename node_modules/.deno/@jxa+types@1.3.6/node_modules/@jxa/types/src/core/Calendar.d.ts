
export namespace Calendar {
    // Default Application
 export interface Application {}
    // Class
 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * This class represents a calendar.
  */
 export interface Calendar {
   /**
    * This is the calendar title.
    */
   name(): string;
   /**
    * This is the calendar title.
    */
   title(): string;
   /**
    * The calendar color.
    */
   color(): any;
   /**
    * An unique calendar key
    */
   uid(): string;
   /**
    * This is the calendar title.
    */
   writable(): boolean;
   /**
    * This is the calendar description.
    */
   description(): string;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * This class represents a message alarm.
  */
 export interface DisplayAlarm {
   /**
    * The interval in minutes between the event and the alarm: (positive for alarm that trigger after the event date or negative for alarms that trigger before).
    */
   triggerInterval(): number;
   /**
    * An absolute alarm date.
    */
   triggerDate(): any;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * This class represents a mail alarm.
  */
 export interface MailAlarm {
   /**
    * The interval in minutes between the event and the alarm: (positive for alarm that trigger after the event date or negative for alarms that trigger before).
    */
   triggerInterval(): number;
   /**
    * An absolute alarm date.
    */
   triggerDate(): any;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * This class represents a sound alarm.
  */
 export interface SoundAlarm {
   /**
    * The interval in minutes between the event and the alarm: (positive for alarm that trigger after the event date or negative for alarms that trigger before).
    */
   triggerInterval(): number;
   /**
    * An absolute alarm date.
    */
   triggerDate(): any;
   /**
    * The system sound name to be used for the alarm
    */
   soundName(): string;
   /**
    * The (POSIX) path to the sound file to be used for the alarm
    */
   soundFile(): string;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * This class represents an 'open file' alarm.
  */
 export interface OpenFileAlarm {
   /**
    * The interval in minutes between the event and the alarm: (positive for alarm that trigger after the event date or negative for alarms that trigger before).
    */
   triggerInterval(): number;
   /**
    * An absolute alarm date.
    */
   triggerDate(): any;
   /**
    * The (POSIX) path to be opened by the alarm
    */
   filepath(): string;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * This class represents a attendee.
  */
 export interface Attendee {
   /**
    * The first and last name of the attendee.
    */
   displayName(): string;
   /**
    * e-mail of the attendee.
    */
   email(): string;
   /**
    * The invitation status for the attendee.
    */
   participationStatus(): any;
 }

 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * This class represents an event.
  */
 export interface Event {
   /**
    * The events notes.
    */
   description(): string;
   /**
    * The event start date.
    */
   startDate(): any;
   /**
    * The event end date.
    */
   endDate(): any;
   /**
    * True if the event is an all-day event
    */
   alldayEvent(): boolean;
   /**
    * The iCalendar (RFC 2445) string describing the event recurrence, if defined
    */
   recurrence(): string;
   /**
    * The event version.
    */
   sequence(): number;
   /**
    * The event modification date.
    */
   stampDate(): any;
   /**
    * The exception dates.
    */
   excludedDates(): any;
   /**
    * The event status.
    */
   status(): any;
   /**
    * This is the event summary.
    */
   summary(): string;
   /**
    * This is the event location.
    */
   location(): string;
   /**
    * An unique todo key.
    */
   uid(): string;
   /**
    * The URL associated to the event.
    */
   url(): string;
 }
    
    // CLass Extension
 /**
  * This file was automatically generated by json-schema-to-typescript.
  * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
  * and run json-schema-to-typescript to regenerate this file.
  */

 /**
  * This class represents iCal.
  */
 export interface Application {
   /**
    * Obsolete
    */
   progression(): any;
   /**
    * Obsolete
    */
   allowCancel(): boolean;
 }
    
    // Records

    // Function options
    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface CreateCalendarOptionalParameter {
      /**
       * the calendar new name
       */
      withName?: string;
    }


    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface SwitchViewOptionalParameter {
      /**
       * the calendar view to be displayed
       */
      to: any;
    }

    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface ViewCalendarOptionalParameter {
      /**
       * the date to be displayed
       */
      at: any;
    }



    /**
     * This file was automatically generated by json-schema-to-typescript.
     * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
     * and run json-schema-to-typescript to regenerate this file.
     */

    export interface MakeOptionalParameter {
      /**
       * The class of the new object.
       */
      new: any;
      /**
       * The location at which to insert the object.
       */
      at?: any;
      /**
       * The initial contents of the object.
       */
      withData?: any;
      /**
       * The initial values for properties of the object.
       */
      withProperties?: any;
    }


}
export interface Calendar extends Calendar.Application {
    // Functions

     /**
      * Creates a new calendar (obsolete, will be removed in next release)

      * @param option
      * 
      */
     createCalendar(option?: Calendar.CreateCalendarOptionalParameter): void;

     /**
      * Tell the application to reload all calendar files contents

      * 
      */
     reloadCalendars(): void;

     /**
      * Show calendar on the given view

      * @param option
      * 
      */
     switchView(option?: Calendar.SwitchViewOptionalParameter): void;

     /**
      * Show calendar on the given date

      * @param option
      * 
      */
     viewCalendar(option?: Calendar.ViewCalendarOptionalParameter): void;

     /**
      * Subscribe to a remote calendar through a webcal or http URL
      * @param directParameter the iCal URL
      * 
      */
     getURL(directParameter: string, ): void;

     /**
      * Show the event or to-do in the calendar window
      * @param directParameter the item
      * 
      */
     show(directParameter: any, ): void;

     /**
      * undefined

      * @param option
      * @return The new object.
      */
     make(option?: Calendar.MakeOptionalParameter): any;

     /**
      * undefined

      * 
      */
     save(): void;
}
